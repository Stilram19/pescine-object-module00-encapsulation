(*) struct vs class in c++:

struct and class can be used interchangeably, but the class keyword is the most popular in c++.
the main difference is the default access control: while everything inside a class is private
by default, everything inside a struct is public by default.
the main reason why structs exist in c++ is for compatibility with c.
So, There is no difference, apart from default encapsulation.

(*) friend keyword:

this keyword is used with classes and functions. a friend class or function can access
the private and protected members. for functions they can be either global or member functions
of other classes.
Member functions cannot be declared as friends.
for the std::ostream &operator<< function can be declared as a member function but the problem
is that it can only have one argument. that's why you need to use the friend keyword.

(*) About Encapsulation: it is wrapping up the data and functions in one unit. it keeps
the details of the object hidden and safe from the outside.
data hiding is done using access modifiers (private, public, protected).

encapsulation reduces the complexity of code by hidding the details, and using the interface
rather than manipulating the data in outside code.

encapsulation vs abstraction:

encapsulation hides the details at the implemetation level, and abstraction hides the details
at the design level. encapsulation's aim is to hide internal working of the class, so that you can change it
without affecting the interface or the design. encapsulation is there to isolate concerns of classes: a class may depend on another
class with just using the interface provided by the other class, and without having the access to the details.

example of encapsulation: login into your account, the implementation of verification is hidding from the client.

(*) Nested Classes/structs: since logically, there is no Account without a Bank, you may consider
to encapsulate the declaration of Account within the declaration of Bank, thus it won't be accessible from outside
the namespace of Bank.

(*) Subscript operator overloading: it's a very good idea to overload subscript operator
because it makes the code user friendly (better than setters and getters in some cases).
the fact that we're returning a reference to an element in the class, the user may modify it as well as read it,
and to encapsulate data, you may consider to return a const reference for read purposes only.

(*) throw; : By using throw; without specifying an exception object (throw;), you re-throw the caught exception as-is, preserving its original type and context, including the stack trace. This ensures that the exception propagates up the call stack with all relevant information intact.
